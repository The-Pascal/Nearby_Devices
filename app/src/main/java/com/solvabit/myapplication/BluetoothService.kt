package com.solvabit.myapplication

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.*
import android.util.Log
import android.widget.Toast
import androidx.core.app.NotificationCompat
import androidx.lifecycle.MutableLiveData
import com.bluetooth.communicator.BluetoothCommunicator
import com.bluetooth.communicator.Message
import com.bluetooth.communicator.Peer
import java.util.*


class BluetoothService: Service() {

    lateinit var bluetoothCommunicator: BluetoothCommunicator

    private val TAG = "RandiKutiya"

    // Binder given to clients (notice class declaration below)
    private val mBinder: IBinder = MyBinder()

    // Random number generator
    private val mGenerator: Random = Random()

    // LiveData for capturing random number generated by the service
    val randomNumberLiveData: MutableLiveData<Int> = MutableLiveData()

    // Channel ID for notification
    val CHANNEL_ID = "Random number notification"

    /**
     * Class used for the client Binder. The Binder object is responsible for returning an instance
     * of "MyService" to the client.
     */
    inner class MyBinder : Binder() {
        // Return this instance of MyService so clients can call public methods
        val service: BluetoothService
            get() =// Return this instance of MyService so clients can call public methods
                this@BluetoothService
    }

    /**
     * This is how the client gets the IBinder object from the service. It's retrieve by the "ServiceConnection"
     * which you'll see later.
     */
    override fun onBind(intent: Intent): IBinder? {
        return mBinder
    }

    /**
     * Called when service is created So  we will do our work here
     */
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "onCreate called")
        startNotification()

        val name = "ho gya"

        bluetoothCommunicator = BluetoothCommunicator(applicationContext, name , BluetoothCommunicator.STRATEGY_P2P_WITH_RECONNECTION)

        initiateBluetooth()

        bluetoothCommunicator.startAdvertising()



    }

    /**
     * Used for creating and starting notification
     * whenever we start our Bound service
     */
    private fun startNotification() {
        if (Build.VERSION.SDK_INT >= 26) {
            val CHANNEL_ID = "my_channel_01"
            val channel = NotificationChannel(
                CHANNEL_ID,
                "My Channel",
                NotificationManager.IMPORTANCE_DEFAULT
            )
            (getSystemService(NOTIFICATION_SERVICE) as NotificationManager).createNotificationChannel(
                channel
            )
            val notification = NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("A service is running in the background")
                .setContentText("").build()
            startForeground(1, notification)
        }
    }

    private fun initiateBluetooth() {

        Log.d(TAG, "initiateBluetooth: chala diya")

        val bluetoothCallback = object : BluetoothCommunicator.Callback() {

            override fun onDisconnected(peer: Peer?, peersLeft: Int) {
                super.onDisconnected(peer, peersLeft)

                Log.d(TAG, "onDisconnected: ho gya")
            }

            override fun onAdvertiseStarted() {
                super.onAdvertiseStarted()

                Log.d(TAG, "onAdvertiseStarted: aajao saare")
            }

            override fun onConnectionRequest(peer: Peer?) {
                super.onConnectionRequest(peer)

                Log.d(TAG, "onConnectionRequest: $peer")

                bluetoothCommunicator.acceptConnection(peer)

            }

            override fun onConnectionSuccess(peer: Peer?, source: Int) {
                super.onConnectionSuccess(peer, source)

//                Toast.makeText(applicationContext, "CONNECTED NOW", Toast.LENGTH_SHORT).show()

                Log.d(TAG, "onConnectionSuccess: $peer")

                bluetoothCommunicator.sendMessage(Message(applicationContext, "head", "ab majja aayega na bhidu", peer))

            }

            override fun onConnectionFailed(peer: Peer?, errorCode: Int) {
                super.onConnectionFailed(peer, errorCode)

                Toast.makeText(applicationContext, "Connection lost $peer", Toast.LENGTH_SHORT).show()

                Log.d(TAG, "onConnectionFailed: $peer $errorCode")
            }

            override fun onMessageReceived(message: Message?, source: Int) {
                super.onMessageReceived(message, source)

                Log.d(TAG, "onMessageReceived: $message")
            }

            override fun onPeerUpdated(peer: Peer?, newPeer: Peer?) {
                super.onPeerUpdated(peer, newPeer)

                Log.d(TAG, "onPeerUpdated: $peer")
            }

            override fun onPeerFound(peer: Peer?) {
                super.onPeerFound(peer)

                Log.d(TAG, "onPeerFound: $peer")
            }

            override fun onPeerLost(peer: Peer?) {
                super.onPeerLost(peer)

                Log.d(TAG, "onPeerLost: $peer")
            }
        }

        Log.d(TAG, "initiateBluetooth: callback add krdiya")

        bluetoothCommunicator.addCallback(bluetoothCallback)

    }

    override fun onDestroy() {
        super.onDestroy()

        Log.d(TAG, "onDestroy: SERVICE DESTROYED")
    }
}